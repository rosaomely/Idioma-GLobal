-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.asistencia
(
    asistencia_id serial NOT NULL,
    estudiante_id integer,
    curso_id integer,
    fecha_clase date,
    asistio boolean,
    CONSTRAINT asistencia_pkey PRIMARY KEY (asistencia_id)
);

CREATE TABLE IF NOT EXISTS public.aulas
(
    aula_id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default",
    capacidad integer,
    ubicacion character varying(100) COLLATE pg_catalog."default",
    equipamiento character varying(100) COLLATE pg_catalog."default",
    estado character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT aulas_pkey PRIMARY KEY (aula_id)
);

CREATE TABLE IF NOT EXISTS public.comunicaciones
(
    comunicacion_id serial NOT NULL,
    profesor_id integer,
    estudiante_id integer,
    fecha date,
    mensaje text COLLATE pg_catalog."default",
    CONSTRAINT comunicaciones_pkey PRIMARY KEY (comunicacion_id)
);

CREATE TABLE IF NOT EXISTS public.cursos
(
    curso_id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default",
    idioma character varying(50) COLLATE pg_catalog."default",
    nivel character varying(50) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    profesor_asignado integer,
    horario character varying(100) COLLATE pg_catalog."default",
    duracion character varying(50) COLLATE pg_catalog."default",
    precio numeric,
    numero_max_estudiantes integer,
    material_didactico character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT cursos_pkey PRIMARY KEY (curso_id)
);

CREATE TABLE IF NOT EXISTS public.estudiantes
(
    estudiante_id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default",
    apellido character varying(100) COLLATE pg_catalog."default",
    fecha_nacimiento date,
    correo character varying(100) COLLATE pg_catalog."default",
    telefono character varying(15) COLLATE pg_catalog."default",
    cedula character varying(15) COLLATE pg_catalog."default",
    direccion character varying(100) COLLATE pg_catalog."default",
    nivel_idioma_actual character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT estudiantes_pkey PRIMARY KEY (estudiante_id)
);

CREATE TABLE IF NOT EXISTS public.informes_asistencia
(
    informe_id serial NOT NULL,
    estudiante_id integer,
    curso_id integer,
    fecha_clase date,
    asistio boolean,
    CONSTRAINT informes_asistencia_pkey PRIMARY KEY (informe_id)
);

CREATE TABLE IF NOT EXISTS public.informes_rendimiento_profesores
(
    informe_id serial NOT NULL,
    profesor_id integer,
    curso_id integer,
    fecha_evaluacion date,
    puntaje numeric,
    comentarios text COLLATE pg_catalog."default",
    CONSTRAINT informes_rendimiento_profesores_pkey PRIMARY KEY (informe_id)
);

CREATE TABLE IF NOT EXISTS public.inscripciones
(
    inscripcion_id serial NOT NULL,
    curso_id integer,
    estudiante_id integer,
    fecha_inscripcion date,
    estado_inscripcion character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT inscripciones_pkey PRIMARY KEY (inscripcion_id)
);

CREATE TABLE IF NOT EXISTS public.materiales_didacticos
(
    material_id serial NOT NULL,
    curso_id integer,
    nombre character varying(100) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    formato character varying(50) COLLATE pg_catalog."default",
    idioma character varying(50) COLLATE pg_catalog."default",
    nivel character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT materiales_didacticos_pkey PRIMARY KEY (material_id)
);

CREATE TABLE IF NOT EXISTS public.pagos
(
    pago_id serial NOT NULL,
    inscripcion_id integer,
    fecha_pago date,
    monto numeric,
    estudiante_id integer,
    curso_id integer,
    importe numeric,
    metodo_pago character varying(50) COLLATE pg_catalog."default",
    estado_pago character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT pagos_pkey PRIMARY KEY (pago_id)
);

CREATE TABLE IF NOT EXISTS public.profesores
(
    profesor_id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default",
    apellido character varying(100) COLLATE pg_catalog."default",
    especialidad character varying(50) COLLATE pg_catalog."default",
    correo character varying(100) COLLATE pg_catalog."default",
    telefono character varying(15) COLLATE pg_catalog."default",
    titulacion character varying(100) COLLATE pg_catalog."default",
    experiencia character varying(50) COLLATE pg_catalog."default",
    disponibilidad character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT profesores_pkey PRIMARY KEY (profesor_id)
);

ALTER TABLE IF EXISTS public.asistencia
    ADD CONSTRAINT asistencia_curso_id_fkey FOREIGN KEY (curso_id)
    REFERENCES public.cursos (curso_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.asistencia
    ADD CONSTRAINT asistencia_estudiante_id_fkey FOREIGN KEY (estudiante_id)
    REFERENCES public.estudiantes (estudiante_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.comunicaciones
    ADD CONSTRAINT comunicaciones_estudiante_id_fkey FOREIGN KEY (estudiante_id)
    REFERENCES public.estudiantes (estudiante_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.comunicaciones
    ADD CONSTRAINT comunicaciones_profesor_id_fkey FOREIGN KEY (profesor_id)
    REFERENCES public.profesores (profesor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cursos
    ADD CONSTRAINT cursos_profesor_asignado_fkey FOREIGN KEY (profesor_asignado)
    REFERENCES public.profesores (profesor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.informes_asistencia
    ADD CONSTRAINT informes_asistencia_curso_id_fkey FOREIGN KEY (curso_id)
    REFERENCES public.cursos (curso_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.informes_asistencia
    ADD CONSTRAINT informes_asistencia_estudiante_id_fkey FOREIGN KEY (estudiante_id)
    REFERENCES public.estudiantes (estudiante_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.informes_rendimiento_profesores
    ADD CONSTRAINT informes_rendimiento_profesores_curso_id_fkey FOREIGN KEY (curso_id)
    REFERENCES public.cursos (curso_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.informes_rendimiento_profesores
    ADD CONSTRAINT informes_rendimiento_profesores_profesor_id_fkey FOREIGN KEY (profesor_id)
    REFERENCES public.profesores (profesor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inscripciones
    ADD CONSTRAINT inscripciones_curso_id_fkey FOREIGN KEY (curso_id)
    REFERENCES public.cursos (curso_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inscripciones
    ADD CONSTRAINT inscripciones_estudiante_id_fkey FOREIGN KEY (estudiante_id)
    REFERENCES public.estudiantes (estudiante_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.materiales_didacticos
    ADD CONSTRAINT materiales_didacticos_curso_id_fkey FOREIGN KEY (curso_id)
    REFERENCES public.cursos (curso_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pagos
    ADD CONSTRAINT pagos_curso_id_fkey FOREIGN KEY (curso_id)
    REFERENCES public.cursos (curso_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pagos
    ADD CONSTRAINT pagos_estudiante_id_fkey FOREIGN KEY (estudiante_id)
    REFERENCES public.estudiantes (estudiante_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pagos
    ADD CONSTRAINT pagos_inscripcion_id_fkey FOREIGN KEY (inscripcion_id)
    REFERENCES public.inscripciones (inscripcion_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;